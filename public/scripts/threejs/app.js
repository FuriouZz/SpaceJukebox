var angle, calculateLinePoint, camera, circle, from, geometry, i, length, line, mat, plane, points, radius, rands, rdr, render, scene, shape, to, triangleShape, update, _i, _j, _ref;

scene = new THREE.Scene();

camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

camera.position.setZ(500);

rdr = new THREE.WebGLRenderer({
  antialias: true
});

rdr.setSize(window.innerWidth, window.innerHeight);

document.getElementById('wrapper').appendChild(rdr.domElement);

geometry = new THREE.PlaneGeometry(500, 500, 32);

mat = new THREE.MeshBasicMaterial({
  color: 0x0000ff,
  side: THREE.DoubleSide
});

plane = new THREE.Mesh(geometry, mat);

scene.add(plane);

geometry = new THREE.CircleGeometry(5, 32);

mat = new THREE.MeshBasicMaterial({
  color: 0x00ff00,
  side: THREE.DoubleSide
});

circle = new THREE.Mesh(geometry, mat);

scene.add(circle);

triangleShape = new THREE.Shape();

triangleShape.moveTo(80, 20);

triangleShape.lineTo(40, 80);

triangleShape.lineTo(120, 80);

triangleShape.lineTo(80, 20);

console.log(triangleShape);

geometry = new THREE.ShapeGeometry(triangleShape);

scene.add(new THREE.Mesh(geometry, mat));

calculateLinePoint = function(angle, length) {
  var x, y;
  x = Math.sin(angle) * length;
  y = Math.cos(angle) * length;
  return {
    x: x,
    y: y
  };
};

rands = [];

for (i = _i = 0; _i <= 255; i = ++_i) {
  rands[i] = Math.random();
}

console.log(rands[0]);

for (i = _j = 0, _ref = rands.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
  angle = Math.PI * 2 * i / rands.length;
  angle += Math.PI * .5;
  length = rands[i] * 50;
  radius = 250;
  from = calculateLinePoint(angle, radius - length * .5);
  to = calculateLinePoint(angle, radius + length * .5);
  shape = new THREE.Shape();
  shape.moveTo(from.x, from.y);
  shape.lineTo(to.x, to.y);
  points = shape.createPointsGeometry();
  line = new THREE.Line(points, new THREE.LineBasicMaterial({
    color: 0xFF0000,
    linewidth: 2
  }));
  scene.add(line);
  if (i === 0) {
    console.log(line);
  }
}

window.onresize = function() {
  rdr.setSize(window.innerWidth, window.innerHeight);
  camera.aspect = window.innerWidth / window.innerHeight;
  return camera.updateProjectionMatrix();
};

update = function() {
  return setTimeout(update, 1000 / SPACE.FPS);
};

update();

render = function() {
  requestAnimationFrame(render);
  return rdr.render(scene, camera);
};

render();

//# sourceMappingURL=data:application/json;base64,