var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.isIncoming = false;

  Spaceship.prototype.isLoop = false;

  Spaceship.prototype.target = null;

  Spaceship.prototype.radius = 0;

  Spaceship.prototype.distance = 0;

  Spaceship.prototype.angle = 0;

  Spaceship.prototype.time = 0;

  Spaceship.prototype.state = null;

  Spaceship.prototype.wait = null;

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = new PIXI.Point(target.x, target.y);
    this.radius = radius;
    this.currentDistance = Math.max(window.innerWidth, window.innerHeight);
    this.angle = Math.random() * PIXI.PI_2;
    target = HELPERS.retina(this.target);
    this.position.x = target.x + Math.cos(this.angle) * HELPERS.retina(this.currentDistance);
    this.position.y = target.y + Math.sin(this.angle) * HELPERS.retina(this.currentDistance);
    this.setState(SPACESHIP.IDLE);
    this.draw();
  }

  Spaceship.prototype.setState = function(state) {
    this.state = state;
    switch (state) {
      case SPACESHIP.IDLE:
        this.isIncoming = false;
        return this.isLoop = false;
      case SPACESHIP.LAUNCHED:
        this.isIncoming = true;
        return this.isLoop = false;
      case SPACESHIP.IN_LOOP:
        this.isIncoming = false;
        this.isLoop = true;
        this.distance = HELPERS.distance(this.position, HELPERS.retina(this.target));
        this.currentDistance = this.distance;
        return this.duration = this.time;
      case SPACESHIP.ARRIVED:
        this.isIncoming = false;
        this.isLoop = false;
        return console.log('arrived');
      default:
        return this.setState(SPACESHIP.IDLE);
    }
  };

  Spaceship.prototype.forward = function(angle, speed) {
    return this.move(angle + Math.PI, speed);
  };

  Spaceship.prototype.backward = function(angle, speed) {
    return this.move(angle, speed);
  };

  Spaceship.prototype.move = function(angle, speed) {
    var direction;
    direction = new PIXI.Point(0, 0);
    direction.x = Math.cos(angle) * speed;
    direction.y = Math.sin(angle) * speed;
    this.position.x += direction.x;
    this.position.y += direction.y;
    return this.rotation = angle;
  };

  Spaceship.prototype.draw = function() {
    this.beginFill(0xFFFFFF);
    this.moveTo(0, HELPERS.retina(-2.5));
    this.lineTo(0, HELPERS.retina(2.5));
    return this.lineTo(HELPERS.retina(7.5), 0);
  };

  Spaceship.prototype.update = function(delta) {
    if (this.state === SPACESHIP.LAUNCHED) {
      return this._updateLaunched();
    } else if (this.state === SPACESHIP.IN_LOOP) {
      return this._updateInLoop(delta);
    }
  };

  Spaceship.prototype._updateLaunched = function() {
    if (HELPERS.distance(this.position, HELPERS.retina(this.target)) <= HELPERS.retina(this.radius)) {
      this.setState(SPACESHIP.IN_LOOP);
    }
    return this.forward(this.angle, 1);
  };

  Spaceship.prototype._updateInLoop = function(delta) {
    var angle, old, pos, progression, target;
    progression = this.time / this.duration;
    progression = 1 - Math.min(progression, 1);
    this.currentDistance = this.distance * (1 - progression);
    target = HELPERS.retina(this.target);
    pos = {
      x: target.x + Math.cos(this.angle + (progression * PIXI.PI_2)) * this.currentDistance,
      y: target.y + Math.sin(this.angle + (progression * PIXI.PI_2)) * this.currentDistance
    };
    old = {
      x: this.position.x,
      y: this.position.y
    };
    this.position.x = pos.x;
    this.position.y = pos.y;
    angle = HELPERS.angleBetweenPoints(old, this.position);
    this.rotation = angle;
    if (progression >= 1) {
      return this.setState(SPACESHIP.ARRIVED);
    }
  };

  return Spaceship;

})(PIXI.Graphics);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzZXMvc3BhY2VzaGlwLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFBO2lTQUFBOztBQUFBLEtBQVcsQ0FBQztBQUVWLDhCQUFBLENBQUE7O0FBQUEsc0JBQUEsVUFBQSxHQUFZLEtBQVosQ0FBQTs7QUFBQSxzQkFDQSxNQUFBLEdBQVksS0FEWixDQUFBOztBQUFBLHNCQUdBLE1BQUEsR0FBWSxJQUhaLENBQUE7O0FBQUEsc0JBSUEsTUFBQSxHQUFZLENBSlosQ0FBQTs7QUFBQSxzQkFNQSxRQUFBLEdBQVksQ0FOWixDQUFBOztBQUFBLHNCQU9BLEtBQUEsR0FBWSxDQVBaLENBQUE7O0FBQUEsc0JBU0EsSUFBQSxHQUFZLENBVFosQ0FBQTs7QUFBQSxzQkFXQSxLQUFBLEdBQVksSUFYWixDQUFBOztBQUFBLHNCQWFBLElBQUEsR0FBTSxJQWJOLENBQUE7O0FBZWEsRUFBQSxtQkFBQyxNQUFELEVBQVMsTUFBVCxHQUFBO0FBQ1gsSUFBQSw0Q0FBQSxTQUFBLENBQUEsQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLE1BQUQsR0FBdUIsSUFBQSxJQUFJLENBQUMsS0FBTCxDQUFXLE1BQU0sQ0FBQyxDQUFsQixFQUFxQixNQUFNLENBQUMsQ0FBNUIsQ0FGdkIsQ0FBQTtBQUFBLElBR0EsSUFBQyxDQUFBLE1BQUQsR0FBbUIsTUFIbkIsQ0FBQTtBQUFBLElBS0EsSUFBQyxDQUFBLGVBQUQsR0FBbUIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxNQUFNLENBQUMsVUFBaEIsRUFBNEIsTUFBTSxDQUFDLFdBQW5DLENBTG5CLENBQUE7QUFBQSxJQU1BLElBQUMsQ0FBQSxLQUFELEdBQW1CLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBQSxHQUFnQixJQUFJLENBQUMsSUFOeEMsQ0FBQTtBQUFBLElBUUEsTUFBQSxHQUFjLE9BQU8sQ0FBQyxNQUFSLENBQWUsSUFBQyxDQUFBLE1BQWhCLENBUmQsQ0FBQTtBQUFBLElBU0EsSUFBQyxDQUFBLFFBQVEs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Q0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjLEdBQUcsQ0FBQyxDQWRsQixDQUFBO0FBQUEsSUFlQSxJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYyxHQUFHLENBQUMsQ0FmbEIsQ0FBQTtBQUFBLElBaUJBLEtBQUEsR0FBUSxPQUFPLENBQUMsa0JBQVIsQ0FBMkIsR0FBM0IsRUFBZ0MsSUFBQyxDQUFBLFFBQWpDLENBakJSLENBQUE7QUFBQSxJQW1CQSxJQUFDLENBQUEsUUFBRCxHQUFZLEtBbkJaLENBQUE7QUFxQkEsSUFBQSxJQUFnQyxXQUFBLElBQWUsQ0FBL0M7YUFBQSxJQUFDLENBQUEsUUFBRCxDQUFVLFNBQVMsQ0FBQyxPQUFwQixFQUFBO0tBekJhO0VBQUEsQ0E1RmYsQ0FBQTs7bUJBQUE7O0dBRjRCLElBQUksQ0FBQyxTQUFuQyxDQUFBIiwiZmlsZSI6ImNsYXNzZXMvc3BhY2VzaGlwLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU1BBQ0UuU3BhY2VzaGlwIGV4dGVuZHMgUElYSS5HcmFwaGljc1xuXG4gIGlzSW5jb21pbmc6IGZhbHNlXG4gIGlzTG9vcDogICAgIGZhbHNlXG5cbiAgdGFyZ2V0OiAgICAgbnVsbFxuICByYWRpdXM6ICAgICAwXG5cbiAgZGlzdGFuY2U6ICAgMFxuICBhbmdsZTogICAgICAwXG5cbiAgdGltZTogICAgICAgMFxuXG4gIHN0YXRlOiAgICAgIG51bGxcblxuICB3YWl0OiBudWxsXG5cbiAgY29uc3RydWN0b3I6ICh0YXJnZXQsIHJhZGl1cyktPlxuICAgIHN1cGVyXG5cbiAgICBAdGFyZ2V0ICAgICAgICAgID0gbmV3IFBJWEkuUG9pbnQodGFyZ2V0LngsIHRhcmdldC55KVxuICAgIEByYWRpdXMgICAgICAgICAgPSByYWRpdXNcblxuICAgIEBjdXJyZW50RGlzdGFuY2UgPSBNYXRoLm1heCh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICAgIEBhbmdsZSAgICAgICAgICAgPSBNYXRoLnJhbmRvbSgpICogUElYSS5QSV8yXG5cbiAgICB0YXJnZXQgICAgICA9IEhFTFBFUlMucmV0aW5hKEB0YXJnZXQpXG4gICAgQHBvc2l0aW9uLnggPSB0YXJnZXQueCArIE1hdGguY29zKEBhbmdsZSkgKiBIRUxQRVJTLnJldGluYShAY3VycmVudERpc3RhbmNlKVxuICAgIEBwb3NpdGlvbi55ID0gdGFyZ2V0LnkgKyBNYXRoLnNpbihAYW5nbGUpICogSEVMUEVSUy5yZXRpbmEoQGN1cnJlbnREaXN0YW5jZSlcblxuICAgIEBzZXRTdGF0ZShTUEFDRVNISVAuSURMRSlcblxuICAgIEBkcmF3KClcblxuICBzZXRTdGF0ZTogKHN0YXRlKS0+XG4gICAgQHN0YXRlID0gc3RhdGVcblxuICAgIHN3aXRjaCBzdGF0ZVxuICAgICAgd2hlbiBTUEFDRVNISVAuSURMRVxuICAgICAgICBAaXNJbmNvbWluZyA9IGZhbHNlXG4gICAgICAgIEBpc0xvb3AgICAgID0gZmFsc2VcbiAgICAgIHdoZW4gU1BBQ0VTSElQLkxBVU5DSEVEXG4gICAgICAgIEBpc0luY29taW5nICAgICAgPSB0cnVlXG4gICAgICAgIEBpc0xvb3AgICAgICAgICAgPSBmYWxzZVxuICAgICAgd2hlbiBTUEFDRVNISVAuSU5fTE9PUFxuICAgICAgICBAaXNJbmNvbWluZyAgICAgID0gZmFsc2VcbiAgICAgICAgQGlzTG9vcCAgICAgICAgICA9IHRydWVcbiAgICAgICAgQGRpc3RhbmNlICAgICAgICA9IEhFTFBFUlMuZGlzdGFuY2UoQHBvc2l0aW9uLCBIRUxQRVJTLnJldGluYShAdGFyZ2V0KSlcbiAgICAgICAgQGN1cnJlbnREaXN0YW5jZSA9IEBkaXN0YW5jZVxuICAgICAgICBAZHVyYXRpb24gICAgICAgID0gQHRpbWVcbiAgICAgIHdoZW4gU1BBQ0VTSElQLkFSUklWRURcbiAgICAgICAgQGlzSW5jb21pbmcgPSBmYWxzZVxuICAgICAgICBAaXNMb29wICAgICA9IGZhbHNlXG4gICAgICAgIGNvbnNvbGUubG9nICdhcnJpdmVkJ1xuICAgICAgZWxzZVxuICAgICAgICBAc2V0U3RhdGUoU1BBQ0VTSElQLklETEUpXG5cbiAgZm9yd2FyZDogKGFuZ2xlLCBzcGVlZCktPlxuICAgIEBtb3ZlKGFuZ2xlICsgTWF0aC5QSSwgc3BlZWQpXG5cbiAgYmFja3dhcmQ6IChhbmdsZSwgc3BlZWQpLT5cbiAgICBAbW92ZShhbmdsZSwgc3BlZWQpXG5cbiAgbW92ZTogKGFuZ2xlLCBzcGVlZCktPlxuICAgIGRpcmVjdGlvbiAgID0gbmV3IFBJWEkuUG9pbnQoMCwgMClcbiAgICBkaXJlY3Rpb24ueCA9IE1hdGguY29zKGFuZ2xlKSAqIHNwZWVkXG4gICAgZGlyZWN0aW9uLnkgPSBNYXRoLnNpbihhbmdsZSkgKiBzcGVlZFxuXG4gICAgQHBvc2l0aW9uLnggKz0gZGlyZWN0aW9uLnhcbiAgICBAcG9zaXRpb24ueSArPSBkaXJlY3Rpb24ueVxuXG4gICAgQHJvdGF0aW9uID0gYW5nbGVcblxuICBkcmF3OiAtPlxuICAgIEBiZWdpbkZpbGwoMHhGRkZGRkYpXG4gICAgQG1vdmVUbygwLCBIRUxQRVJTLnJldGluYSgtMi41KSlcbiAgICBAbGluZVRvKDAsIEhFTFBFUlMucmV0aW5hKDIuNSkpXG4gICAgQGxpbmVUbyhIRUxQRVJTLnJldGluYSg3LjUpLCAwKVxuXG4gIHVwZGF0ZTogKGRlbHRhKS0+XG4gICAgIyBpZiBAd2FpdCA8PSA9MzAqNjAqMTAwMCBhbmQgQHN0YXRlID09IFNQQUNFU0hJUC5JRExFXG4gICAgICAjIGNvbnNvbGUubG9nICdpbmNvbWluZydcbiAgICAgICMgQHNldFN0YXRlKFNQQUNFU0hJUC5MQVVOQ0hFRClcbiAgICAjIGVsc2UgaWYgQHN0YXRlID09IFNQQUNFU0hJUC5MQVVOQ0hFRFxuICAgIGlmIEBzdGF0ZSA9PSBTUEFDRVNISVAuTEFVTkNIRURcbiAgICAgIEBfdXBkYXRlTGF1bmNoZWQoKVxuICAgIGVsc2UgaWYgQHN0YXRlID09IFNQQUNFU0hJUC5JTl9MT09QXG4gICAgICBAX3VwZGF0ZUluTG9vcChkZWx0YSlcblxuICBfdXBkYXRlTGF1bmNoZWQ6IC0+XG4gICAgaWYgSEVMUEVSUy5kaXN0YW5jZShAcG9zaXRpb24sIEhFTFBFUlMucmV0aW5hKEB0YXJnZXQpKSA8PSBIRUxQRVJTLnJldGluYShAcmFkaXVzKVxuICAgICAgQHNldFN0YXRlKFNQQUNFU0hJUC5JTl9MT09QKVxuICAgIEBmb3J3YXJkKEBhbmdsZSwgMSlcblxuICBfdXBkYXRlSW5Mb29wOiAoZGVsdGEpLT5cbiAgICAjIEB0aW1lICs9IGRlbHRhXG4gICAgIyBkdXJhdGlvbiA9IEB3YWl0LzEwMDAjNSo2MFxuICAgICMgcHJvZ3Jlc3Npb24gPSBAdGltZSAvIGR1cmF0aW9uI0B3YWl0IC8gQGR1cmF0aW9uI0B0aW1lIC8gZHVyYXRpb25cbiAgICBwcm9ncmVzc2lvbiA9IEB0aW1lIC8gQGR1cmF0aW9uXG4gICAgcHJvZ3Jlc3Npb24gPSAxIC0gTWF0aC5taW4ocHJvZ3Jlc3Npb24sIDEpXG4gICAgIyBjb25zb2xlLmxvZyBwcm9ncmVzc2lvblxuXG4gICAgQGN1cnJlbnREaXN0YW5jZSA9IEBkaXN0YW5jZSAqICgxIC0gcHJvZ3Jlc3Npb24pXG4gICAgdGFyZ2V0ID0gSEVMUEVSUy5yZXRpbmEoQHRhcmdldClcbiAgICBwb3MgPVxuICAgICAgeDogdGFyZ2V0LnggKyBNYXRoLmNvcyhAYW5nbGUgKyAocHJvZ3Jlc3Npb24gKiBQSVhJLlBJXzIpKSogQGN1cnJlbnREaXN0YW5jZVxuICAgICAgeTogdGFyZ2V0LnkgKyBNYXRoLnNpbihAYW5nbGUgKyAocHJvZ3Jlc3Npb24gKiBQSVhJLlBJXzIpKSogQGN1cnJlbnREaXN0YW5jZVxuXG4gICAgb2xkID1cbiAgICAgIHg6IEBwb3NpdGlvbi54XG4gICAgICB5OiBAcG9zaXRpb24ueVxuXG4gICAgQHBvc2l0aW9uLnggPSBwb3MueFxuICAgIEBwb3NpdGlvbi55ID0gcG9zLnlcblxuICAgIGFuZ2xlID0gSEVMUEVSUy5hbmdsZUJldHdlZW5Qb2ludHMob2xkLCBAcG9zaXRpb24pXG4gICAgIyBhbmdsZSA9IEhFTFBFUlMuYW5nbGVCZXR3ZWVuUG9pbnRzKEB0YXJnZXQsIEBwb3NpdGlvbilcbiAgICBAcm90YXRpb24gPSBhbmdsZSAjKyBNYXRoLlBJKi41XG5cbiAgICBAc2V0U3RhdGUoU1BBQ0VTSElQLkFSUklWRUQpIGlmIHByb2dyZXNzaW9uID49IDFcbiJdfQ==