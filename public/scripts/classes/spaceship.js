var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.Spaceship = (function(_super) {
  __extends(Spaceship, _super);

  Spaceship.prototype.isIncoming = false;

  Spaceship.prototype.isLoop = false;

  Spaceship.prototype.target = null;

  Spaceship.prototype.radius = 0;

  Spaceship.prototype.distance = 0;

  Spaceship.prototype.angle = 0;

  Spaceship.prototype.time = 0;

  Spaceship.prototype.state = null;

  function Spaceship(target, radius) {
    Spaceship.__super__.constructor.apply(this, arguments);
    this.target = target;
    this.radius = radius;
    this.currentDistance = Math.max(window.innerWidth, window.innerHeight) * SPACE.pixelRatio;
    this.angle = Math.random() * PIXI.PI_2;
    this.position.x = this.target.x + Math.cos(this.angle) * this.currentDistance;
    this.position.y = this.target.y + Math.sin(this.angle) * this.currentDistance;
    this.setState(SPACESHIP.IDLE);
    this.draw();
  }

  Spaceship.prototype.setState = function(state) {
    this.state = state;
    switch (state) {
      case SPACESHIP.IDLE:
        this.isIncoming = false;
        return this.isLoop = false;
      case SPACESHIP.LAUNCHED:
        this.isIncoming = true;
        return this.isLoop = false;
      case SPACESHIP.IN_LOOP:
        this.isIncoming = false;
        this.isLoop = true;
        this.distance = HELPERS.distance(this.position, this.target);
        return this.currentDistance = this.distance;
      default:
        return this.setState(SPACESHIP.IDLE);
    }
  };

  Spaceship.prototype.forward = function(angle, speed) {
    return this.move(angle + Math.PI, speed);
  };

  Spaceship.prototype.backward = function(angle, speed) {
    return this.move(angle, speed);
  };

  Spaceship.prototype.move = function(angle, speed) {
    var direction;
    direction = new PIXI.Point(0, 0);
    direction.x = Math.cos(angle) * speed;
    direction.y = Math.sin(angle) * speed;
    this.position.x += direction.x;
    this.position.y += direction.y;
    return this.rotation = angle;
  };

  Spaceship.prototype.draw = function() {
    this.beginFill(0xFFFFFF);
    this.moveTo(0, -5);
    this.lineTo(0, 5);
    return this.lineTo(15, 0);
  };

  Spaceship.prototype.update = function(delta) {
    if (this.isIncoming) {
      return this._updateLaunched();
    } else if (this.isLoop) {
      return this._updateInLoop(delta);
    }
  };

  Spaceship.prototype._updateLaunched = function() {
    if (HELPERS.distance(this.position, this.target) <= this.radius) {
      this.setState(SPACESHIP.IN_LOOP);
    }
    return this.forward(this.angle, 5);
  };

  Spaceship.prototype._updateInLoop = function(delta) {
    var angle, duration, old, pos, progression;
    this.time += delta;
    duration = 10;
    progression = this.time / duration;
    progression = Math.min(progression, 1);
    this.currentDistance = this.distance * (1 - progression);
    pos = {
      x: this.target.x + Math.cos(this.angle + (progression * PIXI.PI_2)) * this.currentDistance,
      y: this.target.y + Math.sin(this.angle + (progression * PIXI.PI_2)) * this.currentDistance
    };
    old = {
      x: this.position.x,
      y: this.position.y
    };
    this.position.x = pos.x;
    this.position.y = pos.y;
    angle = HELPERS.angleBetweenPoints(old, this.position);
    this.rotation = angle;
    if (progression >= 1) {
      return this.setState(SPACESHIP.IDLE);
    }
  };

  return Spaceship;

})(PIXI.Graphics);

//# sourceMappingURL=data:application/json;base64,