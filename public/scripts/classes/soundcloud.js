SPACE.SoundCloud = (function() {
  function SoundCloud(id) {
    SC.initialize({
      client_id: id,
      redirect_uri: 'http://localhost:3000'
    });
  }

  SoundCloud.prototype.pathOrUrl = function(path, callback) {
    var url;
    if (/^\/(playlists|tracks)\/[0-9]+$/.test(path)) {
      return callback(path);
    }
    if (!/^(http|https)/.test(path)) {
      return console.log("\"" + path + "\" is not an url or a path");
    }
    url = path;
    return SC.oEmbed(url, null, (function(_this) {
      return function(oEmbed) {
        var a;
        if (oEmbed) {
          a = document.createElement('div');
          a.innerHTML = oEmbed.html;
          url = a.querySelector('iframe').src;
          url = decodeURIComponent(url);
          url = url.split(new RegExp('http://api.soundcloud.com'))[1];
          path = url.replace(/&.+/, '');
          return callback(path);
        } else {
          return console.log("This sound doesn't exist");
        }
      };
    })(this));
  };

  SoundCloud.prototype.streamSound = function(object, callback, events) {
    var path;
    if (events == null) {
      events = {};
    }
    if (object && object.hasOwnProperty('kind')) {
      path = object.uri.replace('https://api.soundcloud.com', '');
      return SC.stream(path + '?token=1-31329-11457116-c5b96945c5e7e7c', {
        autoPlay: true,
        useWaveformData: true,
        whileplaying: events.whileplaying,
        onfinish: events.onfinish
      }, callback);
    }
  };

  SoundCloud.prototype.getSoundOrPlaylist = function(path, callback) {
    return this.pathOrUrl(path, (function(_this) {
      return function(path) {
        return _this.get(path, callback);
      };
    })(this));
  };

  SoundCloud.prototype.get = function(path, callback) {
    return SC.get(path + '?token=1-31329-11457116-c5b96945c5e7e7c', callback);
  };

  return SoundCloud;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsYXNzZXMvc291bmRjbG91ZC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsS0FBVyxDQUFDO0FBQ0csRUFBQSxvQkFBQyxFQUFELEdBQUE7QUFDWCxJQUFBLEVBQUUsQ0FBQyxVQUFILENBQWM7QUFBQSxNQUNaLFNBQUEsRUFBVyxFQURDO0FBQUEsTUFFWixZQUFBLEVBQWMsdUJBRkY7S0FBZCxDQUFBLENBRFc7RUFBQSxDQUFiOztBQUFBLHVCQVlBLFNBQUEsR0FBVyxTQUFDLElBQUQsRUFBTyxRQUFQLEdBQUE7QUFFVCxRQUFBLEdBQUE7QUFBQSxJQUFBLElBQUcsZ0NBQWdDLENBQUMsSUFBakMsQ0FBc0MsSUFBdEMsQ0FBSDtBQUNFLGFBQU8sUUFBQSxDQUFTLElBQVQsQ0FBUCxDQURGO0tBQUE7QUFHQSxJQUFBLElBQUEsQ0FBQSxlQUFzQixDQUFDLElBQWhCLENBQXFCLElBQXJCLENBQVA7QUFDRSxhQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksSUFBQSxHQUFPLElBQVAsR0FBYyw0QkFBMUIsQ0FBUCxDQURGO0tBSEE7QUFBQSxJQU1BLEdBQUEsR0FBTSxJQU5OLENBQUE7V0FPQSxFQUFFLENBQUMsTUFBSCxDQUFVLEdBQVYsRUFBZSxJQUFmLEVBQXFCLENBQUEsU0FBQSxLQUFBLEdBQUE7YUFBQSxTQUFDLE1BQUQsR0FBQTtBQUNuQixZQUFBLENBQUE7QUFBQSxRQUFBLElBQUcsTUFBSDtBQUNFLFVBQUEsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxhQUFULENBQXVCLEtBQXZCLENBQUosQ0FBQTtBQUFBLFVBQ0EsQ0FBQyxDQUFDLFNBQUYsR0FBYyxNQUFNLENBQUMsSUFEckIsQ0FBQTtBQUFBLFVBRUEsR0FBQSxHQUFPLENBQUMsQ0FBQyxhQUFGLENBQWdCLFFBQWhCLENBQXlCLENBQUMsR0FGakMsQ0FBQTtBQUFBLFVBR0EsR0FBQSxHQUFPLGtCQUFBLENBQW1CLEdBQW5CLENBSFAsQ0FBQTtBQUFBLFVBS0EsR0FBQSxHQUFPLEdBQUcsQ0FBQyxLQUFKLENBQWMsSUFBQSxNQUFBLENBQU8sMkJBQVAsQ0FBZCxDQUFtRCxDQUFBLENBQUEsQ0FMMUQsQ0FBQTtBQUFBLFVBTUEsSUFBQSxHQUFPLEdBQUcsQ0FBQyxPQUFKLENBQVksS0FBWixFQUFtQixFQUFuQixDQU5QLENBQUE7aUJBT0EsUUFBQSxDQUFTLElBQVQsRUFSRjtTQUFBLE1BQUE7aUJBVUUsT0FBTyxDQUFDLEdBQVIsQ0FBWSwwQkFBWixFQVZGO1NBRG1CO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBckIsRUFUUztFQUFBLENBWlgsQ0FBQTs7QUFBQSx1QkFrQ0EsV0FBQSxHQUFhLFNBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsTUFBbkIsR0FBQTtBQUNYLFFBQUEsSUFBQTs7TUFEOEIsU0FBTztLQUNyQztBQUFBLElBQUEsSUFBRyxNQUFBLElBQVcsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsTUFBdEIsQ0FBZDtBQUNFLE1BQUEsSUFBQSxHQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBWCxDQUFtQiw0QkFBbkIsRUFBaUQsRUFBakQsQ0FBUCxDQUFBO2FBQ0EsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFBLEdBQUsseUNBQWYsRUFBMEQ7QUFBQSxRQUN4RCxRQUFBLEVBQVUsSUFEOEM7QUFBQSxRQUd4RCxlQUFBLEVBQWlCLElBSHVDO0FBQUEsUUFLeEQsWUFBQSxFQUFlLE1BQU0sQ0FBQyxZQUxrQztBQUFBLFFBTXhELFFBQUEsRUFBZSxNQUFNLENBQUMsUUFOa0M7T0FBMUQsRUFPRyxRQVBILEVBRkY7S0FEVztFQUFBLENBbENiLENBQUE7O0FBQUEsdUJBaURBLGtCQUFBLEdBQW9CLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTtXQUNsQixJQUFDLENBQUEsU0FBRCxDQUFXLElBQVgsRUFBaUIsQ0FBQSxTQUFBLEtBQUEsR0FBQTthQUFBLFNBQUMsSUFBRCxHQUFBO2VBQ2YsS0FBQyxDQUFBLEdBQUQsQ0FBSyxJQUFMLEVBQVcsUUFBWCxFQURlO01BQUEsRUFBQTtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBakIsRUFEa0I7RUFBQSxDQWpEcEIsQ0FBQTs7QUFBQSx1QkFzREEsR0FBQSxHQUFLLFNBQUMsSUFBRCxFQUFPLFFBQVAsR0FBQTtXQUNILEVBQUUsQ0FBQyxHQUFILENBQU8sSUFBQSxHQUFLLHlDQUFaLEVBQXVELFFBQXZELEVBREc7RUFBQSxDQXRETCxDQUFBOztvQkFBQTs7SUFERixDQUFBIiwiZmlsZSI6ImNsYXNzZXMvc291bmRjbG91ZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNQQUNFLlNvdW5kQ2xvdWRcbiAgY29uc3RydWN0b3I6IChpZCktPlxuICAgIFNDLmluaXRpYWxpemUoe1xuICAgICAgY2xpZW50X2lkOiBpZFxuICAgICAgcmVkaXJlY3RfdXJpOiAnaHR0cDovL2xvY2FsaG9zdDozMDAwJ1xuICAgIH0pXG5cbiAgICAjIElGIE5PIFRPS0VOXG4gICAgIyBTQy5jb25uZWN0KC0+XG4gICAgICAjIDEtMzEzMjktMTE0NTcxMTYtYzViOTY5NDVjNWU3ZTdjXG4gICAgICAjIGNvbnNvbGUubG9nIFNDLmFjY2Vzc1Rva2VuKClcbiAgICAjIClcblxuICBwYXRoT3JVcmw6IChwYXRoLCBjYWxsYmFjayktPlxuICAgICMgVmVyaWZ5IGlmIGl0J3MgYW4gSUQgb3IgYW4gVVJMXG4gICAgaWYgL15cXC8ocGxheWxpc3RzfHRyYWNrcylcXC9bMC05XSskLy50ZXN0KHBhdGgpXG4gICAgICByZXR1cm4gY2FsbGJhY2socGF0aClcblxuICAgIHVubGVzcyAvXihodHRwfGh0dHBzKS8udGVzdChwYXRoKVxuICAgICAgcmV0dXJuIGNvbnNvbGUubG9nIFwiXFxcIlwiICsgcGF0aCArIFwiXFxcIiBpcyBub3QgYW4gdXJsIG9yIGEgcGF0aFwiXG5cbiAgICB1cmwgPSBwYXRoXG4gICAgU0Mub0VtYmVkIHVybCwgbnVsbCwgKG9FbWJlZCk9PlxuICAgICAgaWYgb0VtYmVkXG4gICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBhLmlubmVySFRNTCA9IG9FbWJlZC5odG1sXG4gICAgICAgIHVybCAgPSBhLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpLnNyY1xuICAgICAgICB1cmwgID0gZGVjb2RlVVJJQ29tcG9uZW50KHVybClcblxuICAgICAgICB1cmwgID0gdXJsLnNwbGl0KG5ldyBSZWdFeHAoJ2h0dHA6Ly9hcGkuc291bmRjbG91ZC5jb20nKSlbMV1cbiAgICAgICAgcGF0aCA9IHVybC5yZXBsYWNlKC8mLisvLCAnJylcbiAgICAgICAgY2FsbGJhY2socGF0aClcbiAgICAgIGVsc2VcbiAgICAgICAgY29uc29sZS5sb2cgXCJUaGlzIHNvdW5kIGRvZXNuJ3QgZXhpc3RcIlxuXG4gIHN0cmVhbVNvdW5kOiAob2JqZWN0LCBjYWxsYmFjaywgZXZlbnRzPXt9KS0+XG4gICAgaWYgb2JqZWN0IGFuZCBvYmplY3QuaGFzT3duUHJvcGVydHkoJ2tpbmQnKVxuICAgICAgcGF0aCA9IG9iamVjdC51cmkucmVwbGFjZSgnaHR0cHM6Ly9hcGkuc291bmRjbG91ZC5jb20nLCAnJylcbiAgICAgIFNDLnN0cmVhbShwYXRoKyc/dG9rZW49MS0zMTMyOS0xMTQ1NzExNi1jNWI5Njk0NWM1ZTdlN2MnLCB7XG4gICAgICAgIGF1dG9QbGF5OiB0cnVlXG4gICAgICAgICMgdXNlRVFEYXRhOiB0cnVlXG4gICAgICAgIHVzZVdhdmVmb3JtRGF0YTogdHJ1ZVxuICAgICAgICAjIHVzZVBlYWtEYXRhOiB0cnVlXG4gICAgICAgIHdoaWxlcGxheWluZyA6IGV2ZW50cy53aGlsZXBsYXlpbmdcbiAgICAgICAgb25maW5pc2ggICAgIDogZXZlbnRzLm9uZmluaXNoXG4gICAgICB9LCBjYWxsYmFjaylcblxuXG5cblxuICBnZXRTb3VuZE9yUGxheWxpc3Q6IChwYXRoLCBjYWxsYmFjayktPlxuICAgIEBwYXRoT3JVcmwocGF0aCwgKHBhdGgpPT5cbiAgICAgIEBnZXQocGF0aCwgY2FsbGJhY2spXG4gICAgKVxuXG4gIGdldDogKHBhdGgsIGNhbGxiYWNrKS0+XG4gICAgU0MuZ2V0KHBhdGgrJz90b2tlbj0xLTMxMzI5LTExNDU3MTE2LWM1Yjk2OTQ1YzVlN2U3YycsIGNhbGxiYWNrKVxuIl19