var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

SPACE.SceneManager = (function() {
  SceneManager.prototype.currentScene = null;

  SceneManager.prototype.renderer = null;

  SceneManager.prototype.stats = null;

  function SceneManager(width, height) {
    this._loop = __bind(this._loop, this);
    if (this.renderer) {
      return this;
    }
    this.renderer = new PIXI.autoDetectRenderer(width * App.pixelRatio, height * App.pixelRatio, null, true, false);
    document.querySelector(CONSTANTS.Selectors.Canvas).appendChild(this.renderer.view);
    requestAnimationFrame(this._loop);
    if (App.env === 'development') {
      this.stats = new Stats();
      this.stats.setMode(0);
      this.stats.domElement.style.position = 'absolute';
      this.stats.domElement.style.left = '0px';
      this.stats.domElement.style.top = '0px';
      document.body.appendChild(this.stats.domElement);
    }
  }

  SceneManager.prototype._loop = function() {
    if (App.env === 'development') {
      this.stats.begin();
    }
    setTimeout(((function(_this) {
      return function() {
        return window.requestAnimationFrame(_this._loop);
      };
    })(this)), 1000 / CONSTANTS.FPS);
    if (!this.currentScene || this.currentScene.isPaused()) {
      return;
    }
    this.currentScene.update();
    this.renderer.render(this.currentScene);
    if (App.env === 'development') {
      return this.stats.end();
    }
  };

  SceneManager.prototype.createScene = function(identifier, aScene, interactive) {
    var scene;
    if (this.scenes[identifier]) {
      return void 0;
    }
    scene = new aScene(0x000000);
    this.scenes[identifier] = scene;
    return scene;
  };

  SceneManager.prototype.goToScene = function(identifier) {
    if (this.scenes[identifier]) {
      if (this.currentScene) {
        this.currentScene.pause;
      }
      this.currentScene = this.scenes[identifier];
      this.currentScene.resume();
      return true;
    }
    return false;
  };

  return SceneManager;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmFnZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUEsa0ZBQUE7O0FBQUEsS0FBVyxDQUFDO0FBRVIseUJBQUEsWUFBQSxHQUFjLElBQWQsQ0FBQTs7QUFBQSx5QkFDQSxRQUFBLEdBQVUsSUFEVixDQUFBOztBQUFBLHlCQUVBLEtBQUEsR0FBTyxJQUZQLENBQUE7O0FBSWEsRUFBQSxzQkFBQyxLQUFELEVBQVEsTUFBUixHQUFBO0FBQ1QseUNBQUEsQ0FBQTtBQUFBLElBQUEsSUFBSSxJQUFDLENBQUEsUUFBTDtBQUFvQixhQUFPLElBQVAsQ0FBcEI7S0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsS0FBQSxHQUFRLEdBQUcsQ0FBQyxVQUFwQyxFQUFnRCxNQUFBLEdBQVMsR0FBRyxDQUFDLFVBQTdELEVBQXlFLElBQXpFLEVBQStFLElBQS9FLEVBQXFGLEtBQXJGLENBRmhCLENBQUE7QUFBQSxJQUdBLFFBQVEsQ0FBQyxhQUFULENBQXVCLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBM0MsQ0FBa0QsQ0FBQyxXQUFuRCxDQUErRCxJQUFDLENBQUEsUUFBUSxDQUFDLElBQXpFLENBSEEsQ0FBQTtBQUFBLElBSUEscUJBQUEsQ0FBc0IsSUFBQyxDQUFBLEtBQXZCLENBSkEsQ0FBQTtBQU1BLElBQUEsSUFBRyxHQUFHLENBQUMsR0FBSixLQUFXLGFBQWQ7QUFDSSxNQUFBLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFBLENBQUEsQ0FBYixDQUFBO0FBQUEsTUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLE9BQVAsQ0FBZSxDQUFmLENBREEsQ0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQXhCLEdBQW1DLFVBRm5DLENBQUE7QUFBQSxNQUdBLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUF4QixHQUErQixLQUgvQixDQUFBO0FBQUEsTUFJQSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBeEIsR0FBOEIsS0FKOUIsQ0FBQTtBQUFBLE1BTUEsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFkLENBQTJCLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBbEMsQ0FOQSxDQURKO0tBUFM7RUFBQSxDQUpiOztBQUFBLHlCQW9CQSxLQUFBLEdBQU8sU0FBQSxHQUFBO0FBRUgsSUFBQSxJQUFrQixHQUFHLENBQUMsR0FBSixLQUFXLGFBQTdCO0FBQUEsTUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBQSxDQUFBLENBQUE7S0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLENBQUMsQ0FBQSxTQUFBLEtBQUEsR0FBQTthQUFBLFNBQUEsR0FBQTtlQUNSLE1BQU0sQ0FBQyxxQkFBUCxDQUE2QixLQUFDLENBQUEsS0FBOUIsRUFEUTtNQUFBLEVBQUE7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUQsQ0FBWCxFQUVHLElBQUEsR0FBTyxTQUFTLENBQUMsR0FGcEIsQ0FGQSxDQUFBO0FBTUEsSUFBQSxJQUFHLENBQUEsSUFBRSxDQUFBLFlBQUYsSUFBa0IsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFkLENBQUEsQ0FBckI7QUFDSSxZQUFBLENBREo7S0FOQTtBQUFBLElBU0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxNQUFkLENBQUEsQ0FUQSxDQUFBO0FBQUEsSUFVQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBaUIsSUFBQyxDQUFBLFlBQWxCLENBVkEsQ0FBQTtBQVlBLElBQUEsSUFBZ0IsR0FBRyxDQUFDLEdBQUosS0FBVyxhQUEzQjthQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFBLEVBQUE7S0FkRztFQUFBLENBcEJQLENBQUE7O0FBQUEseUJBb0NBLFdBQUEsR0FBYSxTQUFDLFVBQUQsRUFBYSxNQUFiLEVBQXFCLFdBQXJCLEdBQUE7QUFDVCxRQUFBLEtBQUE7QUFBQSxJQUFBLElBQUcsSUFBQyxDQUFBLE1BQU8sQ0FBQSxVQUFBLENBQVg7QUFDSSxhQUFPLE1BQVAsQ0FESjtLQUFBO0FBQUEsSUFHQSxLQUFBLEdBQVksSUFBQSxNQUFBLENBQU8sUUFBUCxDQUhaLENBQUE7QUFBQSxJQUlBLElBQUMsQ0FBQSxNQUFPLENBQUEsVUFBQSxDQUFSLEdBQXNCLEtBSnRCLENBQUE7QUFNQSxXQUFPLEtBQVAsQ0FQUztFQUFBLENBcENiLENBQUE7O0FBQUEseUJBNkNBLFNBQUEsR0FBVyxTQUFDLFVBQUQsR0FBQTtBQUNQLElBQUEsSUFBRyxJQUFDLENBQUEsTUFBTyxDQUFBLFVBQUEsQ0FBWDtBQUNJLE1BQUEsSUFBRyxJQUFDLENBQUEsWUFBSjtBQUNJLFFBQUEsSUFBQyxDQUFBLFlBQVksQ0FBQyxLQUFkLENBREo7T0FBQTtBQUFBLE1BRUEsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBQyxDQUFBLE1BQU8sQ0FBQSxVQUFBLENBRnhCLENBQUE7QUFBQSxNQUdBLElBQUMsQ0FBQSxZQUFZLENBQUMsTUFBZCxDQUFBLENBSEEsQ0FBQTtBQUlBLGFBQU8sSUFBUCxDQUxKO0tBQUE7QUFPQSxXQUFPLEtBQVAsQ0FSTztFQUFBLENBN0NYLENBQUE7O3NCQUFBOztJQUZKLENBQUEiLCJmaWxlIjoibWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNQQUNFLlNjZW5lTWFuYWdlclxuXG4gICAgY3VycmVudFNjZW5lOiBudWxsXG4gICAgcmVuZGVyZXI6IG51bGxcbiAgICBzdGF0czogbnVsbFxuXG4gICAgY29uc3RydWN0b3I6ICh3aWR0aCwgaGVpZ2h0KS0+XG4gICAgICAgIGlmIChAcmVuZGVyZXIpIHRoZW4gcmV0dXJuIEBcblxuICAgICAgICBAcmVuZGVyZXIgPSBuZXcgUElYSS5hdXRvRGV0ZWN0UmVuZGVyZXIod2lkdGggKiBBcHAucGl4ZWxSYXRpbywgaGVpZ2h0ICogQXBwLnBpeGVsUmF0aW8sIG51bGwsIHRydWUsIGZhbHNlKVxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKENPTlNUQU5UUy5TZWxlY3RvcnMuQ2FudmFzKS5hcHBlbmRDaGlsZChAcmVuZGVyZXIudmlldylcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKEBfbG9vcClcblxuICAgICAgICBpZiBBcHAuZW52ID09ICdkZXZlbG9wbWVudCdcbiAgICAgICAgICAgIEBzdGF0cyA9IG5ldyBTdGF0cygpXG4gICAgICAgICAgICBAc3RhdHMuc2V0TW9kZSgwKVxuICAgICAgICAgICAgQHN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnXG4gICAgICAgICAgICBAc3RhdHMuZG9tRWxlbWVudC5zdHlsZS5sZWZ0ID0gJzBweCdcbiAgICAgICAgICAgIEBzdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnXG5cbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoIEBzdGF0cy5kb21FbGVtZW50IClcblxuICAgIF9sb29wOiAoKT0+XG5cbiAgICAgICAgQHN0YXRzLmJlZ2luKCkgaWYgQXBwLmVudiA9PSAnZGV2ZWxvcG1lbnQnXG5cbiAgICAgICAgc2V0VGltZW91dCAoPT5cbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQF9sb29wXG4gICAgICAgICksIDEwMDAgLyBDT05TVEFOVFMuRlBTXG5cbiAgICAgICAgaWYgIUBjdXJyZW50U2NlbmUgb3IgQGN1cnJlbnRTY2VuZS5pc1BhdXNlZCgpXG4gICAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAY3VycmVudFNjZW5lLnVwZGF0ZSgpXG4gICAgICAgIEByZW5kZXJlci5yZW5kZXIoQGN1cnJlbnRTY2VuZSlcblxuICAgICAgICBAc3RhdHMuZW5kKCkgaWYgQXBwLmVudiA9PSAnZGV2ZWxvcG1lbnQnXG5cbiAgICBjcmVhdGVTY2VuZTogKGlkZW50aWZpZXIsIGFTY2VuZSwgaW50ZXJhY3RpdmUpLT5cbiAgICAgICAgaWYgQHNjZW5lc1tpZGVudGlmaWVyXVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICAgICAgIHNjZW5lID0gbmV3IGFTY2VuZSgweDAwMDAwMClcbiAgICAgICAgQHNjZW5lc1tpZGVudGlmaWVyXSA9IHNjZW5lXG5cbiAgICAgICAgcmV0dXJuIHNjZW5lXG5cbiAgICBnb1RvU2NlbmU6IChpZGVudGlmaWVyKS0+XG4gICAgICAgIGlmIEBzY2VuZXNbaWRlbnRpZmllcl1cbiAgICAgICAgICAgIGlmIEBjdXJyZW50U2NlbmVcbiAgICAgICAgICAgICAgICBAY3VycmVudFNjZW5lLnBhdXNlXG4gICAgICAgICAgICBAY3VycmVudFNjZW5lID0gQHNjZW5lc1tpZGVudGlmaWVyXVxuICAgICAgICAgICAgQGN1cnJlbnRTY2VuZS5yZXN1bWUoKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcblxuICAgICAgICByZXR1cm4gZmFsc2VcblxuIyBjbGFzcyBNYW5hZ2VyXG4jICAgX2N1cnJlbnQ6IG51bGxcbiMgICBfcGF1c2VkOiB0cnVlXG4jICAgX0ZQUzogMzBcblxuIyAgIGNvbnN0cnVjdG9yOiAtPlxuIyAgICAgQF9yZW5kZXJlciA9IG5ldyBQSVhJLmF1dG9EZXRlY3RSZW5kZXJlcigpXG4jICAgICBAX3VwZGF0ZSgpXG5cbiMgICBfdXBkYXRlOiA9PlxuIyAgICAgaWYgQF9wYXVzZWQgYW5kIEBfY3VycmVudFxuIyAgICAgICBzZXRUaW1lb3V0KFxuIyAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShAX3VwZGF0ZSlcbiMgICAgICAgICBAX3JlbmRlcmVyLnJlbmRlcihAX2N1cnJlbnQpXG4jICAgICAgICwgQF9GUFMvMTAwMClcblxuIyAgIHB1c2hTdGFnZTogKHN0YWdlKS0+XG4jICAgICBfY3VycmVudCA9IHN0YWdlXG5cbiMgICBwbGF5OiAtPlxuIyAgICAgQF9wYXVzZWQgPSBmYWxzZVxuXG4jICAgcGF1c2U6IC0+XG4jICAgICBAX3BhdXNlZCA9IHRydWVcbiJdfQ==