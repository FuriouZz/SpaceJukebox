var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SPACE.MainScene = (function(_super) {
  __extends(MainScene, _super);

  MainScene.prototype.playlist = null;

  MainScene.prototype.current = null;

  function MainScene(bg) {
    this._whileplaying = __bind(this._whileplaying, this);
    this._onfinish = __bind(this._onfinish, this);
    this._onplay = __bind(this._onplay, this);
    this._starting = __bind(this._starting, this);
    var link, middlePoint;
    MainScene.__super__.constructor.call(this, bg);
    middlePoint = new PIXI.Point(window.innerWidth, window.innerHeight);
    this.eq = new SPACE.Equalizer(middlePoint, {
      minLength: 0,
      maxLength: 200
    });
    this.addChild(this.eq);
    this.sc = new SPACE.SoundCloud(SPACE.SOUNDCLOUD.id);
    this.playlist = [];
    link = 'https://soundcloud.com/huhwhatandwhere/sets/supreme-laziness-the-celestics';
    this.sc.getSoundOrPlaylist(link, (function(_this) {
      return function(o) {
        var data, spaceship, track, _i, _len, _ref, _results;
        _ref = o.tracks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          spaceship = new SPACE.Spaceship(middlePoint, _this.eq.radius);
          _this.addChild(spaceship);
          track = new SPACE.Track(data, spaceship);
          _results.push(_this.playlist.push(track));
        }
        return _results;
      };
    })(this));
  }

  MainScene.prototype.draw = function() {
    return this.eq.draw();
  };

  MainScene.prototype.update = function(delta) {
    this.eq.update(delta);
    if (this.playlist.length > 0 && this.current === null) {
      this.current = this.playlist[0];
      return this.playSound(this.current);
    }
  };

  MainScene.prototype.playSound = function(track) {
    return this.sc.streamSound(this.current.data, this._starting, {
      onplay: this._onplay,
      onfinish: this._onfinish,
      onstop: this._onstop,
      whileplaying: this._whileplaying
    });
  };

  MainScene.prototype.play = function() {
    if (this.current && this.current.hasOwnProperty('sound')) {
      return this.current.sound.play();
    }
  };

  MainScene.prototype.resume = function() {
    if (this.current && this.current.hasOwnProperty('sound')) {
      return this.current.sound.resume();
    }
  };

  MainScene.prototype.pause = function() {
    if (this.current && this.current.hasOwnProperty('sound')) {
      this.current.sound.pause();
      return this.eq.mute();
    }
  };

  MainScene.prototype.stop = function() {
    if (this.current && this.current.hasOwnProperty('sound')) {
      this.current.sound.stop();
      return this.eq.mute();
    }
  };

  MainScene.prototype.next = function() {
    return this._onfinish();
  };

  MainScene.prototype._starting = function(sound) {
    return this.current.sound = sound;
  };

  MainScene.prototype._onplay = function() {
    return console.log('onplay');
  };

  MainScene.prototype._onfinish = function() {
    this.current.sound.stop();
    this.current = null;
    this.playlist.shift();
    return this.eq.mute();
  };

  MainScene.prototype._whileplaying = function() {
    var datas, i, _i;
    datas = Array(256);
    for (i = _i = 0; _i <= 127; i = ++_i) {
      datas[i] = Math.max(this.current.sound.waveformData.left[i], this.current.sound.waveformData.right[i]);
      datas[255 - i] = Math.max(this.current.sound.waveformData.left[i], this.current.sound.waveformData.right[i]);
    }
    if (this.current.sound.paused) {
      return this.eq.mute();
    } else {
      return this.eq.setNewValues(datas);
    }
  };

  return MainScene;

})(SPACE.Scene);

//# sourceMappingURL=data:application/json;base64,