var HELPERS;

HELPERS = HELPERS || {
  trigger: function(e, object) {
    e.object = object;
    return document.dispatchEvent(e);
  },
  shuffle: function(array) {
    tmp;
    var curr, rand, tmp;
    curr = array.length;
    while (0 !== curr) {
      rand = Math.floor(Math.random() * curr);
      curr -= 1;
      tmp = array[curr];
      array[curr] = array[rand];
      array[rand] = tmp;
    }
    return array;
  },
  merge: function(options, overrides) {
    return this.extend(this.extend({}, options), overrides);
  },
  extend: function(object, properties) {
    var key, val;
    for (key in properties) {
      val = properties[key];
      object[key] = val;
    }
    return object;
  },
  angleBetweenPoints: function(first, second) {
    var height, width;
    height = second.y - first.y;
    width = second.x - first.x;
    return Math.atan2(height, width);
  },
  distance: function(point1, point2) {
    var d, x, y;
    x = point1.x - point2.x;
    y = point1.y - point2.y;
    d = x * x + y * y;
    return Math.sqrt(d);
  },
  collision: function(dot1, dot2) {
    var dist, r1, r2;
    r1 = dot1.radius ? dot1.radius : 0;
    r2 = dot2.radius ? dot2.radius : 0;
    dist = r1 + r2;
    return this.distance(dot1.position, dot2.position) <= Math.sqrt(dist * dist);
  },
  map: function(value, low1, high1, low2, high2) {
    return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
  },
  retina: function(value) {
    var a, array, key, o, object, _i, _len;
    if (typeof value === 'object') {
      object = value;
      o = {};
      for (key in object) {
        value = object[key];
        if (typeof value === 'number') {
          o[key] = value * SPACE.pixelRatio;
        }
      }
      return this.merge(object, o);
    } else if (typeof value === 'array') {
      array = value;
      a = [];
      for (key = _i = 0, _len = array.length; _i < _len; key = ++_i) {
        value = array[key];
        if (typeof value === 'number') {
          a.push(value * SPACE.pixelRatio);
        } else {
          a.push(value);
        }
      }
      return a;
    } else if (typeof value === 'number') {
      return value * SPACE.pixelRatio;
    }
    return false;
  }
};

//# sourceMappingURL=data:application/json;base64,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QjtBQUNFLFVBQUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxLQUFBLEdBQVEsS0FBSyxDQUFDLFVBQXJCLENBQUEsQ0FERjtTQUFBLE1BQUE7QUFHRSxVQUFBLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxDQUFBLENBSEY7U0FERjtBQUFBLE9BRkE7QUFPQSxhQUFPLENBQVAsQ0FSRztLQUFBLE1BU0EsSUFBRyxNQUFBLENBQUEsS0FBQSxLQUFnQixRQUFuQjtBQUNILGFBQU8sS0FBQSxHQUFRLEtBQUssQ0FBQyxVQUFyQixDQURHO0tBakJMO0FBbUJBLFdBQU8sS0FBUCxDQXBCTTtFQUFBLENBbkRXO0NBQXJCLENBQUEiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5IRUxQRVJTID0gSEVMUEVSUyB8fCB7XG5cbiAgIyBFdmVudFxuICB0cmlnZ2VyOiAoZSwgb2JqZWN0KS0+XG4gICAgZS5vYmplY3QgPSBvYmplY3RcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGUpXG5cbiAgIyBBcnJheVxuICBzaHVmZmxlOiAoYXJyYXkpLT5cbiAgICB0bXBcbiAgICBjdXJyID0gYXJyYXkubGVuZ3RoXG4gICAgd2hpbGUgMCAhPSBjdXJyXG4gICAgICByYW5kID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycilcbiAgICAgIGN1cnIgLT0gMVxuICAgICAgdG1wICAgICAgICAgPSBhcnJheVtjdXJyXVxuICAgICAgYXJyYXlbY3Vycl0gPSBhcnJheVtyYW5kXVxuICAgICAgYXJyYXlbcmFuZF0gPSB0bXBcbiAgICByZXR1cm4gYXJyYXlcblxuICAjIE9iamVjdFxuICBtZXJnZTogKG9wdGlvbnMsIG92ZXJyaWRlcykgLT5cbiAgICBAZXh0ZW5kIChAZXh0ZW5kIHt9LCBvcHRpb25zKSwgb3ZlcnJpZGVzXG5cbiAgZXh0ZW5kOiAob2JqZWN0LCBwcm9wZXJ0aWVzKSAtPlxuICAgIGZvciBrZXksIHZhbCBvZiBwcm9wZXJ0aWVzXG4gICAgICBvYmplY3Rba2V5XSA9IHZhbFxuICAgIG9iamVjdFxuXG4gICMgTWF0aFxuICBhbmdsZUJldHdlZW5Qb2ludHM6IChmaXJzdCwgc2Vjb25kKSAtPlxuICAgIGhlaWdodCA9IHNlY29uZC55IC0gZmlyc3QueVxuICAgIHdpZHRoICA9IHNlY29uZC54IC0gZmlyc3QueFxuICAgICMgY29uc29sZS5sb2coJ1V0aWxzJywgTWF0aC5hdGFuMihoZWlnaHQsIHdpZHRoKSlcbiAgICByZXR1cm4gTWF0aC5hdGFuMihoZWlnaHQsIHdpZHRoKVxuXG4gIGRpc3RhbmNlOiAocG9pbnQxLCBwb2ludDIpIC0+XG4gICAgeCA9IHBvaW50MS54IC0gcG9pbnQyLnhcbiAgICB5ID0gcG9pbnQxLnkgLSBwb2ludDIueVxuICAgIGQgPSB4ICogeCArIHkgKiB5XG4gICAgcmV0dXJuIE1hdGguc3FydChkKVxuXG4gIGNvbGxpc2lvbjogKGRvdDEsIGRvdDIpLT5cbiAgICByMSA9IGlmIGRvdDEucmFkaXVzIHRoZW4gZG90MS5yYWRpdXMgZWxzZSAwXG4gICAgcjIgPSBpZiBkb3QyLnJhZGl1cyB0aGVuIGRvdDIucmFkaXVzIGVsc2UgMFxuICAgIGRpc3QgPSByMSArIHIyXG5cbiAgICByZXR1cm4gQGRpc3RhbmNlKGRvdDEucG9zaXRpb24sIGRvdDIucG9zaXRpb24pIDw9IE1hdGguc3FydChkaXN0ICogZGlzdClcblxuICBtYXA6ICh2YWx1ZSwgbG93MSwgaGlnaDEsIGxvdzIsIGhpZ2gyKSAtPlxuICAgIHJldHVybiBsb3cyICsgKGhpZ2gyIC0gbG93MikgKiAodmFsdWUgLSBsb3cxKSAvIChoaWdoMSAtIGxvdzEpXG5cbiAgcmV0aW5hOiAodmFsdWUpLT5cbiAgICBpZiB0eXBlb2YgdmFsdWUgaXMgJ29iamVjdCdcbiAgICAgIG9iamVjdCA9IHZhbHVlXG4gICAgICBvID0ge31cbiAgICAgIGZvciBrZXkgb2Ygb2JqZWN0XG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV1cbiAgICAgICAgaWYgdHlwZW9mIHZhbHVlIGlzICdudW1iZXInXG4gICAgICAgICAgb1trZXldID0gdmFsdWUgKiBTUEFDRS5waXhlbFJhdGlvXG4gICAgICByZXR1cm4gQG1lcmdlKG9iamVjdCwgbylcbiAgICBlbHNlIGlmIHR5cGVvZiB2YWx1ZSBpcyAnYXJyYXknXG4gICAgICBhcnJheSA9IHZhbHVlXG4gICAgICBhID0gW11cbiAgICAgIGZvciB2YWx1ZSwga2V5IGluIGFycmF5XG4gICAgICAgIGlmIHR5cGVvZiB2YWx1ZSBpcyAnbnVtYmVyJ1xuICAgICAgICAgIGEucHVzaCh2YWx1ZSAqIFNQQUNFLnBpeGVsUmF0aW8pXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBhLnB1c2godmFsdWUpXG4gICAgICByZXR1cm4gYVxuICAgIGVsc2UgaWYgdHlwZW9mIHZhbHVlIGlzICdudW1iZXInXG4gICAgICByZXR1cm4gdmFsdWUgKiBTUEFDRS5waXhlbFJhdGlvXG4gICAgcmV0dXJuIGZhbHNlXG59XG4iXX0=